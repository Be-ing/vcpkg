name: Build

on: [pull_request, push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            vcpkg_path: C:\mixxx-vcpkg
            vcpkg_bootstrap: .\bootstrap-vcpkg.bat
            vcpkg_triplet: x64-windows
            vcpkg_cache: 'C:\mixxx-vcpkg\installed'
            check_disk_space: Get-PSDrive
            #- os: macos-10.15
            #  vcpkg_path: /Users/runner/mixxx-vcpkg
            #  vcpkg_bootstrap: ./bootstrap-vcpkg.sh
            #  vcpkg_triplet: x64-osx
            #  vcpkg_cache: /Users/runner/.cache/vcpkg/archives
            #  check_disk_space: df -h
    env:
      VCPKG_PACKAGES: >-
        libebur128
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}
      MIXXX_VERSION: 2.3
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out git repository
      uses: LebedevRI/checkout@issue197
      with:
        path: ${{ matrix.vcpkg_path }}

    - name: Bootstrap vcpkg
      run: ${{ matrix.vcpkg_bootstrap }}
      working-directory: ${{ matrix.vcpkg_path }}

    - name: "[macOS] Bootstrap vcpkg"
      if: runner.os == 'macOS'
      run: brew install yasm automake

    - name: Set up cache
      uses: actions/cache@v2
      with:
        path: ${{ matrix.vcpkg_cache }}
        key: vcpkg-installed-${{ matrix.vcpkg_triplet }}-${{ github.head_ref }}-${{ github.run_number }}
        restore-keys: |
          vcpkg-installed-${{ matrix.vcpkg_triplet }}-${{ github.head_ref }}

    - name: Check available disk space
      run: ${{ matrix.check_disk_space }}

    - name: Build packages
      run: ./vcpkg install --clean-after-build ${{ env.VCPKG_PACKAGES }}
      working-directory: ${{ matrix.vcpkg_path }}
      env:
        VCPKG_OVERLAY_PORTS: overlay/ports

    - name: Upload GitHub Actions artifacts of build logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ matrix.os }}
        path: ${{ matrix.vcpkg_path  }}/buildtrees/**/*.log

    - name: Create buildenv archive
      run: ./vcpkg export ${{ env.VCPKG_PACKAGES }} --zip --output=mixxx-dependencies-${{ env.MIXXX_VERSION }}-${{ matrix.vcpkg_triplet }}-${{ github.sha }}
      working-directory: ${{ matrix.vcpkg_path }}

    - name: "[Windows] Install additional tools"
      if: runner.os == 'Windows' && env.SSH_PASSWORD != null
      env:
        SSH_PASSWORD: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY_PASSWORD }}
      run: |
        $Env:PATH="C:\msys64\usr\bin;$Env:PATH"
        pacman -S --noconfirm coreutils bash rsync openssh
        Add-Content -Path "$Env:GITHUB_ENV" -Value "PATH=$Env:PATH"

    - name: "Upload build to downloads.mixxx.org"
      if: github.event_name == 'push' && env.SSH_PASSWORD != null
      run: bash .github/deploy.sh mixxx-dependencies-${{ env.MIXXX_VERSION }}-${{ matrix.vcpkg_triplet }}-${{ github.sha }}.zip
      working-directory: ${{ matrix.vcpkg_path }}
      env:
        DESTDIR: public_html/downloads/dependencies
        OS: ${{ runner.os }}
        SSH_HOST: downloads-hostgator.mixxx.org
        SSH_KEY: .github/downloads-hostgator.mixxx.org.key
        SSH_PASSWORD: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY_PASSWORD }}
        SSH_USER: mixxx
        UPLOAD_ID: ${{ github.run_id }}

    - name: Upload GitHub Actions artifacts
      uses: actions/upload-artifact@v2
      with:
        name: mixxx-dependencies-${{ env.MIXXX_VERSION }}-${{ matrix.vcpkg_triplet }}-${{ github.sha }}
        path: ${{ matrix.vcpkg_path }}/mixxx-dependencies-${{ env.MIXXX_VERSION }}-${{ matrix.vcpkg_triplet }}-${{ github.sha }}.zip
